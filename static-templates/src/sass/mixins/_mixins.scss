
// generic transform
@mixin transform($transforms) {
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// generic transition
@mixin transition($transition, $var1: null, $var2: null, $var3: null, $var4: null) {

  @if ($var4) {
    -ms-transition: $transition, $var1, $var2, $var3, $var4;
    -webkit-transition: $transition, $var1, $var2, $var3, $var4;
    transition: $transition, $var1, $var2, $var3, $var4;
  }
  @else if ($var3) {
    //  four
    -ms-transition: $transition, $var1, $var2, $var3;
    -webkit-transition: $transition, $var1, $var2, $var3;
    transition: $transition, $var1, $var2, $var3;
  }
  @else if ($var2) {
    //  three
    -ms-transition: $transition, $var1, $var2;
    -webkit-transition: $transition, $var1, $var2;
    transition: $transition, $var1, $var2;
  }
  @else if ($var1) {
    //  two
    -ms-transition: $transition, $var1;
    -webkit-transition: $transition, $var1;
    transition: $transition, $var1;
  }
  @else if ($var1 == null) {
    // one
    -ms-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
  }
}


// generic transition
@mixin transition-property($prop, $var1: null, $var2: null, $var3: null, $var4: null) {

  @if ($var4) {
    -ms-transition-property: $prop, $var1, $var2, $var3, $var4;
    -webkit-transition-property: $prop, $var1, $var2, $var3, $var4;
    transition-property: $prop, $var1, $var2, $var3, $var4;
  }
  @else if ($var3) {
    //  four
    -ms-transition-property: $prop, $var1, $var2, $var3;
    -webkit-transition-property: $prop, $var1, $var2, $var3;
    transition-property: $prop, $var1, $var2, $var3;
  }
  @else if ($var2) {
    //  three
    -ms-transition-property: $prop, $var1, $var2;
    -webkit-transition-property: $prop, $var1, $var2;
    transition-property: $prop, $var1, $var2;
  }
  @else if ($var1) {
    //  two
    -ms-transition-property: $prop, $var1;
    -webkit-transition-property: $prop, $var1;
    transition-property: $prop, $var1;
  }
  @else if ($var1 == null) {
    // one
    -ms-transition-property: $prop;
    -webkit-transition-property: $prop;
    transition-property: $prop;
  }
}


// generic animate
@mixin animation($animate) {
  -webkit-animation: $animate;
  animation: $animate;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}

@mixin translateX ($x) {
  @include transform(translateX($x));
}



@mixin translateY ($y) {
  @include transform(translateY($y));
}


// skew
@mixin skew ($arg) {
  @include transform(skew(#{$arg}deg));
}
//transform origin
@mixin transform-origin ($origin) {
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}


//  gradient
@mixin gradient($color, $color1, $from, $to, $deg: 90deg) {


  background: -o-linear-gradient($deg, $color $from, $color1 $to);
  /* Opera 11.10+ */
  background: -ms-linear-gradient($deg, $color $from, $color1 $to);
  /* IE10+ */
  //filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#1301FE', endColorstr='#F4F60C75', GradientType='1');
  /* for IE */
  background: linear-gradient($deg, $color $from, $color1 $to);
  /* W3C */
}




/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}



@mixin clearfix(){

  &:after, &:before{
    content: '';
    display: table;
    width:100%;
    height:0;
    clear: both;
  }
}


@mixin grayscale_element($value) {
    -webkit-filter: #{"grayscale(#{$value})"};
    -moz-filter: #{"grayscale(#{$value})"};
    filter:#{"grayscale(#{$value})"};
}




// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
          eot: "?#iefix",
          //eot: "?#iefix" + "format('embedded-opentype')",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}







// @mixin show-overlay(){
//   .overlay{
//     opacity: .9;
//     pointer-events: all;
//     z-index: 9;
//   }
// }



@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &::-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &::-ms-input-placeholder      {@content}  
};


@mixin aspect-ratio($width, $height) {
    position: relative;
    &:before{
        display: block;
        content: " ";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }

  > .content {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
  }
}

// mixin for box shadow

@mixin box-shadow($shadow1, $shadow2:false, $shadow3:false, $shadow4:false, $shadow5:false) {
  $params: $shadow1;
   @if $shadow2 
     { $params: $shadow1, $shadow2; }
     @if $shadow3 != false
       { $params: $shadow1, $shadow2, $shadow3; }
       @if $shadow4 != false
         { $params: $shadow1, $shadow2, $shadow3, $shadow4; }
         @if $shadow5 != false
           { $params: $shadow1, $shadow2, $shadow3, $shadow4, $shadow5; }
 
   -webkit-box-shadow: $params;
      -moz-box-shadow: $params;
           box-shadow: $params;
 
 }

// Mixin placeholder

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}  
}


